export qualified all from ICAT
export all from ICAT
export NUM_DATA_OBJ_COLL

rewrite LOCAL_ZONE(zn)
    ZONE_NAME(zid, zn) ZONE_TYPE_NAME(zid, "local")

rewrite NUM_DATA_BY_RESC(rid, c)
    let c = count distinct id (DATA_OBJ(id, rid))

rewrite NUM_DATA_BY_NAME(cn, n, c)
    let c = count distinct id (COLL_NAME(cid, cn) DATA_NAME(id, rid, n) DATA_COLL_ID(id, rid, cid))

rewrite TOKEN_ID (ns, n, id)
    TOKEN_NAME(id, n) TOKEN_NAMESPACE(id, ns)

rewrite delete METAMAP_BY_OBJ_ID(id)
    OBJT_METAMAP_OBJ(id, mid) delete OBJT_METAMAP_OBJ(id, mid)

rewrite delete AVUS()
    META_OBJ(mid) ~ OBJT_METAMAP_OBJ(id, mid) delete META_OBJ(mid)

rewrite RESC_PARENT_BY_ZONE_AND_NAME(zn, rn, p)
    RESC_NAME(rid, rn) RESC_ZONE_NAME(rid, zn) RESC_PARENT(rid, p)

rewrite insert RESC_PARENT_TS(rid, p, pc, ts)
    insert RESC_PARENT(rid, p) RESC_PARENT_CONTEXT(rid, pc) RESC_MODIFY_TS(rid, ts)

rewrite COLL_CHILD_BY_NAME(cn, id)
    distinct (COLL_PARENT_COLL_NAME(id, cn) | COLL_NAME(cid, cn) DATA_COLL_ID(id, rid, cid))

rewrite delete COLL_BY_NAME(cn, cid)
    COLL_NAME(cid, cn) delete COLL_OBJ(cid)

rewrite delete ACCESS_BY_OBJ_ID(id)
    OBJT_ACCESS_OBJ(id, uid, acc) delete OBJT_ACCESS_OBJ(id, uid, acc)

rewrite PASSWORD_BY_USER_NAME_AND_ZONE(zn, un, pw)
    USER_OR_GROUP_ID(zn, un, uid) USER_PASSWORD_USER_ID(pw, uid)

rewrite RESC_ID (zn, rn, rid)
    RESC_NAME(rid, rn) RESC_ZONE_NAME(rid, zn)

rewrite USER_OR_GROUP_ID(zn, un, uid)
    USER_NAME(uid, un) USER_ZONE_NAME(uid, zn)

rewrite META_ID(a, v, u, mid)
    META_ATTRIBUTE(mid, a) META_VALUE(mid, v) META_UNITS(mid, u)

rewrite META_ID_BY_ATTRIBUTE_AND_VALUE(a, v, mid)
    META_ATTRIBUTE(mid, a) META_VALUE(mid, v) (META_UNITS(mid, u) | META_UNITS(mid, ""))

rewrite insert META(mid, a, v, u, cts, mts)
    insert META_OBJ(mid) META_ATTRIBUTE(mid, a) META_VALUE(mid, v) META_UNITS(mid, u) META_CREATE_TS(mid, cts) META_MODIFY_TS(mid, mts)

rewrite insert COLL_INHERITANCE_TS(cid, ci, ts)
    insert COLL_INHERITANCE(cid, ci) COLL_MODIFY_TS(cid, ts)

rewrite insert COLL_INHERITANCE_BY_NAME(cn, ci, ts)
    (COLL_NAME(cid, cn) | COLL_NAME(cid, cn2) like(cn2, cn)) insert COLL_INHERITANCE_TS(cid, ci, ts)

rewrite USER_ID(zn, un, uid)
    USER_OR_GROUP_ID(zn, un, uid) USER_TYPE(uid, ut) ~eq(ut, "rodsgroup")

rewrite GROUP_ID(zn, un, uid)
    USER_OR_GROUP_ID(zn, un, uid) USER_TYPE(uid, "rodsgroup")

rewrite DATA_ID(cid, n, id)
    DATA_COLL_ID(id, rid, cid) DATA_NAME(id, rid, n)

rewrite REPL_RESC_ID (id, rnum, rid)
    DATA_REPL_NUM(id, rid, rnum)

rewrite REPL2(id, cid, n, rnum, version, dtype, dsize, rid, filepath, un, zn, status, chksum, dmode, cts, mts, expts, rn)
    DATA_COLL_ID(id, rid, cid) DATA_NAME(id, rid, n) DATA_REPL_NUM(id, rid, rnum) DATA_VERSION(id, rid, version) DATA_TYPE(id, rid, dtype)
    DATA_SIZE(id, rid, dsize) DATA_FILE_PATH(id, rid, filepath) DATA_OWNER_NAME(id, rid, un) DATA_OWNER_ZONE(id, rid, zn)
    DATA_IS_DIRTY(id, rid, status) DATA_CHECKSUM(id, rid, chksum) DATA_MODE(id, rid, dmode) DATA_CREATE_TS(id, rid, cts) DATA_MODIFY_TS(id, rid, mts)
    DATA_EXPIRY_TS(id, rid, expts) DATA_RESC_NAME(id, rid, rn)

rewrite insert REPL2(id, cid, n, rnum, version, dtype, dsize, rid, filepath, un, zn, status, chksum, dmode, cts, mts, expts, rn)
    insert DATA_COLL_ID(id, rid, cid) DATA_NAME(id, rid, n) DATA_REPL_NUM(id, rid, rnum) DATA_VERSION(id, rid, version) DATA_TYPE(id, rid, dtype)
            DATA_SIZE(id, rid, dsize) DATA_FILE_PATH(id, rid, filepath) DATA_OWNER_NAME(id, rid, un) DATA_OWNER_ZONE(id, rid, zn)
            DATA_IS_DIRTY(id, rid, status) DATA_CHECKSUM(id, rid, chksum) DATA_MODE(id, rid, dmode) DATA_CREATE_TS(id, rid, cts) DATA_MODIFY_TS(id, rid, mts)
            DATA_EXPIRY_TS(id, rid, expts) DATA_RESC_NAME(id, rid, rn)

rewrite insert REPL(id, cid, n, rnum, version, dtype, dsize, rid, filepath, un, zn, status, chksum, dmode, cts, mts, expts, rn)
    insert DATA_OBJ(id, rid) DATA_COLL_ID(id, rid, cid) DATA_NAME(id, rid, n) DATA_REPL_NUM(id, rid, rnum) DATA_VERSION(id, rid, version) DATA_TYPE(id, rid, dtype)
            DATA_SIZE(id, rid, dsize) DATA_FILE_PATH(id, rid, filepath) DATA_OWNER_NAME(id, rid, un) DATA_OWNER_ZONE(id, rid, zn)
            DATA_IS_DIRTY(id, rid, status) DATA_CHECKSUM(id, rid, chksum) DATA_MODE(id, rid, dmode) DATA_CREATE_TS(id, rid, cts) DATA_MODIFY_TS(id, rid, mts)
            DATA_EXPIRY_TS(id, rid, expts) DATA_RESC_NAME(id, rid, rn)

rewrite insert DATA_ACCESS_INHERIT_COLL(id, cid, cts, mts)
    OBJT_ACCESS_OBJ(cid, uid, acc) insert OBJT_ACCESS_OBJ(id, uid, acc) OBJT_ACCESS_CRAETE_TS(id, uid, acc, cts) OBJT_ACCESS_MODIFY_TS(id, uid, acc, mts)

rewrite insert DATA_ACCESS_BY_USER(id, zn, un, acctoken, cts, mts)
    USER_ID(zn, un, uid) TOKEN_ID("access_type", acctoken, acc) insert OBJT_ACCESS_OBJ(id, uid, acc) OBJT_ACCESS_CRAETE_TS(id, uid, acc, cts) OBJT_ACCESS_MODIFY_TS(id, uid, acc, mts)

rewrite MAX_REPL_NUM(id, c)
    let c = max rnum (DATA_REPL_NUM(id, rid, rnum))

rewrite DIFF_REPL_NUM(id, rnum, rnum2)
    DATA_REPL_NUM(id, rid, rnum2) ~eq(rnum2, rnum)

rewrite REPL_RESC_ID(id, rnum, rid)
    DATA_REPL_NUM(id, rid, rnum)

rewrite delete REPL_BY_NAME(cn, n, rnum)
    COLL_NAME(cid, cn) DATA_NAME(id, rid, n) DATA_COLL_ID(id, rid, cid) DATA_REPL_NUM(id, rid, rnum) delete DATA_OBJ(id, rid)

rewrite delete DATA_BY_NAME(cn, n)
    COLL_NAME(cid, cn) DATA_NAME(id, rid, n) DATA_COLL_ID(id, rid, cid) delete DATA_OBJ(id, rid)
